#!/usr/bin/env python3

import argparse
import os
import sys

parser = argparse.ArgumentParser(description='Print version number of veins_inet (e.g., "4.0") or a component thereof.', epilog='Not all combinations of switches are supported.')
parser.add_argument('-M', '--major', action='store_true', help='print only the major version')
parser.add_argument('-m', '--minor', action='store_true', help='print only the minor version')
parser.add_argument('-p', '--patch', action='store_true', help='print only the patch level')
parser.add_argument('-a', '--alpha', action='store_true', help='print only the alpha stage')
args = parser.parse_args()

header_file_name = os.path.join(os.path.dirname(__file__), 'src', 'veins_inet', 'veins_inet.h')

major = None
minor = None
patch = None
alpha = None

with open(header_file_name) as f:
    for line in f:
        line = line.strip()
        if line.startswith('#define VEINS_INET_VERSION_MAJOR '):
            major = int(line[33:])
        if line.startswith('#define VEINS_INET_VERSION_MINOR '):
            minor = int(line[33:])
        if line.startswith('#define VEINS_INET_VERSION_PATCH '):
            patch = int(line[33:])
        if line.startswith('#define VEINS_INET_VERSION_ALPHA '):
            alpha = int(line[33:])

if None in (major, minor, patch, alpha):
    print('Could not parse "{}". Aborting.'.format(header_file_name), file=sys.stderr)
    sys.exit(1)

version_string = ''
if (args.major, args.minor, args.patch, args.alpha) == (True, False, False, False):
    version_string = "{}".format(major)
elif (args.major, args.minor, args.patch, args.alpha) == (True, True, False, False):
    version_string = "{}.{}".format(major, minor)
elif (args.major, args.minor, args.patch, args.alpha) == (False, True, False, False):
    version_string = "{}".format(minor)
elif (args.major, args.minor, args.patch, args.alpha) == (False, False, True, False):
    version_string = "{}".format(patch)
elif (args.major, args.minor, args.patch, args.alpha) == (False, False, False, True):
    version_string = "{}".format(alpha)
elif (args.major, args.minor, args.patch, args.alpha) == (False, False, False, False):
    version_string = "{}.{}".format(major, minor)
    if patch > 0:
        version_string += ".{}".format(patch)
    if alpha > 0:
        version_string += "-alpha{}".format(alpha)
else:
    print('Invalid version format requested', file=sys.stderr)
    sys.exit(1)

print(version_string)
